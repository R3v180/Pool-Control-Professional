// filename: packages/server/prisma/schema.prisma
// version: 3.0.4 (FIXED)
// description: Elimina la relación inversa rota de Tenant a Payment.

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ======================================
// ENUMS
// ======================================

enum UserRole {
  SUPER_ADMIN
  ADMIN
  TECHNICIAN
  MANAGER
}

enum SubscriptionStatus {
  TRIAL
  ACTIVE
  PAYMENT_PENDING
  INACTIVE
}

enum VisitStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum NotificationStatus {
  PENDING
  RESOLVED
}

enum IncidentPriority {
  LOW
  NORMAL
  HIGH
  CRITICAL
}

enum IncidentTaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum LogAction {
  CREATION
  STATUS_CHANGE
  COMMENT
  DEADLINE_REQUEST
  DEADLINE_UPDATE
}

enum InputType {
  NUMBER
  BOOLEAN
  TEXT
  SELECT
}

enum Frequency {
  DIARIA
  SEMANAL
  QUINCENAL
  MENSUAL
  TRIMESTRAL
  SEMESTRAL
  ANUAL
}

enum BillingModel {
  FEE_PLUS_MATERIALS
  ALL_INCLUSIVE
  SERVICE_ONLY
}


// ======================================
// CORE MODELS
// ======================================

model Tenant {
  id                     String                 @id @default(cuid())
  companyName            String
  subdomain              String                 @unique
  subscriptionStatus     SubscriptionStatus     @default(TRIAL)
  createdAt              DateTime               @default(now())
  updatedAt              DateTime               @default(now())
  users                  User[]
  clients                Client[]
  pools                  Pool[]
  parameterTemplates     ParameterTemplate[]
  scheduledTaskTemplates ScheduledTaskTemplate[]
  products               Product[]
  incidentTasks          IncidentTask[]
  productCategories      ProductCategory[]
  // --- LÍNEA ELIMINADA ---
  // payments               Payment[]
  expenses               Expense[]

  @@map("tenants")
}

model User {
  id                    String              @id @default(cuid())
  name                  String
  email                 String              @unique
  password              String
  role                  UserRole
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @default(now())
  tenantId              String
  tenant                Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  visits                Visit[]
  notifications         Notification[]
  assignedIncidentTasks IncidentTask[]      @relation("AssignedTasks")
  incidentTaskLogs      IncidentTaskLog[]
  uploadedImages        IncidentImage[]

  @@map("users")
}

// ======================================
// CLIENT & POOL MANAGEMENT
// ======================================

model Client {
  id                   String                 @id @default(cuid())
  name                 String
  contactPerson        String?
  email                String?
  phone                String?
  address              String?
  priceModifier        Float                  @default(1.0)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @default(now())
  pools                Pool[]
  tenantId             String
  tenant               Tenant                 @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  monthlyFee           Float                  @default(0.0)
  billingModel         BillingModel           @default(SERVICE_ONLY)
  pricingRules         ClientProductPricing[]
  payments             Payment[]

  @@map("clients")
}

model Pool {
  id             String                @id @default(cuid())
  name           String
  address        String
  qrCode         String?               @unique
  volume         Float?
  type           String?
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @default(now())
  clientId       String
  client         Client                @relation(fields: [clientId], references: [id], onDelete: Cascade)
  tenantId       String
  tenant         Tenant                @relation(fields: [tenantId], references: [id], onDelete: Restrict)
  configurations PoolConfiguration[]
  visits         Visit[]

  @@map("pools")
}

// ======================================
// FINANCIAL MODELS
// ======================================

model Product {
  id           String                 @id @default(cuid())
  name         String
  description  String?
  unit         String
  cost         Float
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @default(now())
  tenantId     String
  tenant       Tenant                 @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  consumptions Consumption[]
  salePrice    Float                  @default(0.0)
  taxRate      Int                    @default(21)
  categoryId   String?
  category     ProductCategory?       @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  pricingRules ClientProductPricing[]

  @@map("products")
}

model ProductCategory {
  id           String                 @id @default(cuid())
  name         String
  tenantId     String
  tenant       Tenant                 @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  products     Product[]
  pricingRules ClientProductPricing[]

  @@map("product_categories")
}

model ClientProductPricing {
  id                 String         @id @default(cuid())
  discountPercentage Float
  clientId           String
  client             Client         @relation(fields: [clientId], references: [id], onDelete: Cascade)
  productId          String?
  product            Product?       @relation(fields: [productId], references: [id], onDelete: Cascade)
  productCategoryId  String?
  productCategory    ProductCategory? @relation(fields: [productCategoryId], references: [id], onDelete: Cascade)

  @@unique([clientId, productId, productCategoryId])
  @@map("client_product_pricings")
}

model Consumption {
  id        String   @id @default(cuid())
  quantity  Float
  visitId   String
  visit     Visit    @relation(fields: [visitId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Restrict)

  @@map("consumptions")
}

model Payment {
  id          String   @id @default(cuid())
  amount      Float
  paymentDate DateTime
  method      String
  notes       String?
  
  clientId    String
  client      Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  
  @@map("payments")
}

model Expense {
  id          String   @id @default(cuid())
  amount      Float
  expenseDate DateTime
  description String
  category    String
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("expenses")
}

// ======================================
// SERVICE CATALOGS & CONFIGURATION
// ======================================

model ParameterTemplate {
  id                 String              @id @default(cuid())
  name               String
  unit               String?
  type               InputType
  selectOptions      String[]            @default([])
  tenantId           String
  tenant             Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  poolConfigurations PoolConfiguration[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @default(now())

  @@map("parameter_templates")
}

model ScheduledTaskTemplate {
  id                 String              @id @default(cuid())
  name               String
  description        String?
  tenantId           String
  tenant             Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  poolConfigurations PoolConfiguration[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @default(now())

  @@map("scheduled_task_templates")
}

model PoolConfiguration {
  id                  String                 @id @default(cuid())
  frequency           Frequency
  minThreshold        Float?
  maxThreshold        Float?
  lastCompleted       DateTime?
  poolId              String
  pool                Pool                   @relation(fields: [poolId], references: [id], onDelete: Cascade)
  parameterTemplateId String?
  parameterTemplate   ParameterTemplate?     @relation(fields: [parameterTemplateId], references: [id], onDelete: Cascade)
  taskTemplateId      String?
  taskTemplate        ScheduledTaskTemplate? @relation(fields: [taskTemplateId], references: [id], onDelete: Cascade)

  @@map("pool_configurations")
}

// ======================================
// OPERATIONAL MODELS
// ======================================

model Visit {
  id             String         @id @default(cuid())
  timestamp      DateTime
  status         VisitStatus    @default(PENDING)
  notes          String?
  hasIncident    Boolean        @default(false)
  completedTasks String[]
  poolId         String
  pool           Pool           @relation(fields: [poolId], references: [id], onDelete: Cascade)
  technicianId   String?
  technician     User?          @relation(fields: [technicianId], references: [id], onDelete: SetNull)
  results        VisitResult[]
  notifications  Notification[]
  consumptions   Consumption[]

  @@map("visits")
}

model VisitResult {
  id            String  @id @default(cuid())
  value         String
  parameterName String
  parameterUnit String?
  visitId       String
  visit         Visit   @relation(fields: [visitId], references: [id], onDelete: Cascade)

  @@map("visit_results")
}

// ======================================
// INCIDENT & TICKETING SYSTEM
// ======================================

model Notification {
  id                   String          @id @default(cuid())
  message              String
  isRead               Boolean         @default(false)
  status               NotificationStatus @default(PENDING)
  priority             IncidentPriority?
  resolutionNotes      String?
  resolutionDeadline   DateTime?
  createdAt            DateTime        @default(now())
  visitId              String?
  visit                Visit?          @relation(fields: [visitId], references: [id], onDelete: Cascade)
  userId               String
  user                 User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenantId             String
  images               IncidentImage[]
  incidentTasks        IncidentTask[]
  parentNotificationId String?
  parentNotification   Notification?   @relation("NotificationThread", fields: [parentNotificationId], references: [id], onDelete: Cascade)
  childNotifications   Notification[]  @relation("NotificationThread")

  @@map("notifications")
}

model IncidentImage {
  id             String       @id @default(cuid())
  url            String
  uploadedAt     DateTime     @default(now())
  notificationId String
  notification   Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  uploaderId     String
  uploader       User         @relation(fields: [uploaderId], references: [id], onDelete: Cascade)

  @@map("incident_images")
}

model IncidentTask {
  id              String            @id @default(cuid())
  title           String
  description     String?
  status          IncidentTaskStatus @default(PENDING)
  priority        IncidentPriority  @default(NORMAL)
  deadline        DateTime?
  resolutionNotes String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now())
  notificationId  String
  notification    Notification      @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  assignedToId    String?
  assignedTo      User?             @relation("AssignedTasks", fields: [assignedToId], references: [id], onDelete: SetNull)
  tenantId        String
  tenant          Tenant            @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  logs            IncidentTaskLog[]

  @@map("incident_tasks")
}

model IncidentTaskLog {
  id             String       @id @default(cuid())
  action         LogAction
  details        String
  createdAt      DateTime     @default(now())
  incidentTaskId String
  incidentTask   IncidentTask @relation(fields: [incidentTaskId], references: [id], onDelete: Cascade)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("incident_task_logs")
}