// filename: prisma/schema.prisma
// version: 9.0.2 (FIXED)
// description: Corrige las relaciones bidireccionales faltantes en los modelos User/IncidentTask y ProductCategory/ClientProductPricing.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =================================================================
// 1. MODELOS DE NEGOCIO PRINCIPALES
// =================================================================

model Tenant {
  id                 String                @id @default(cuid())
  companyName        String
  subdomain          String                @unique
  subscriptionStatus SubscriptionStatus    @default(TRIAL)
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt

  users               User[]
  clients             Client[]
  pools               Pool[]
  parameterTemplates  ParameterTemplate[]
  taskTemplates       ScheduledTaskTemplate[]
  products            Product[]
  productCategories   ProductCategory[]
  zones               Zone[]
  routeTemplates      RouteTemplate[]
  incidentTasks       IncidentTask[]
  notifications       Notification[]
  expenses            Expense[]
}

model User {
  id             String         @id @default(cuid())
  email          String         @unique
  name           String
  password       String
  role           UserRole
  isAvailable    Boolean        @default(true)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  tenantId       String
  tenant         Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  assignedVisits Visit[]
  routeTemplates RouteTemplate[]
  assignedTasks  IncidentTask[] @relation(name: "AssignedTasks")
  createdTasks   IncidentTask[] @relation(name: "CreatedTasks") // ✅ CORRECCIÓN: La contraparte está ahora en IncidentTask
  uploadedImages IncidentImage[]
  notifications  Notification[]
  taskLogs       IncidentTaskLog[]
  availabilities UserAvailability[]

  @@index([tenantId])
}

model Client {
  id                 String                 @id @default(cuid())
  name               String
  contactPerson      String?
  email              String?
  phone              String?
  address            String?
  priceModifier      Float                  @default(1.0)
  monthlyFee         Float                  @default(0.0)
  billingModel       BillingModel           @default(SERVICE_ONLY)
  createdAt          DateTime               @default(now())
  updatedAt          DateTime               @updatedAt

  tenantId           String
  tenant             Tenant                 @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  pools              Pool[]
  clientPricingRules ClientProductPricing[]
  payments           Payment[]

  @@index([tenantId])
}

model Pool {
  id             String              @id @default(cuid())
  name           String
  address        String
  volume         Int?
  type           String?
  qrCode         String?             @unique

  clientId       String
  client         Client              @relation(fields: [clientId], references: [id], onDelete: Cascade)

  zoneId         String?
  zone           Zone?               @relation(fields: [zoneId], references: [id], onDelete: SetNull)
  
  tenantId       String
  tenant         Tenant              @relation(fields: [tenantId], references: [id], onDelete: NoAction)

  visits         Visit[]
  configurations PoolConfiguration[]

  @@index([clientId])
  @@index([tenantId])
}

// =================================================================
// 2. MODELOS DE PLANIFICACIÓN Y RUTAS
// =================================================================

model Zone {
  id             String          @id @default(cuid())
  name           String
  
  tenantId       String
  tenant         Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  pools          Pool[]
  routeTemplates RouteTemplate[]

  @@unique([name, tenantId])
  @@index([tenantId])
}

model RouteTemplate {
  id           String              @id @default(cuid())
  name         String
  dayOfWeek    DayOfWeek
  
  tenantId     String
  tenant       Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  technicianId String?
  technician   User?               @relation(fields: [technicianId], references: [id], onDelete: SetNull)
  
  zones        Zone[]
  seasons      RouteTemplateSeason[]

  @@index([tenantId])
}

model RouteTemplateSeason {
  id              String         @id @default(cuid())
  frequency       VisitFrequency
  startDate       DateTime
  endDate         DateTime
  
  routeTemplateId String
  routeTemplate   RouteTemplate  @relation(fields: [routeTemplateId], references: [id], onDelete: Cascade)
}

model UserAvailability {
  id        String   @id @default(cuid())
  startDate DateTime
  endDate   DateTime
  reason    String?

  userId   String
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  tenantId String

  @@index([userId])
  @@index([tenantId, startDate, endDate])
}


// =================================================================
// 3. MODELOS DE EJECUCIÓN (VISITAS Y PARTES DE TRABAJO)
// =================================================================

model Visit {
  id             String        @id @default(cuid())
  timestamp      DateTime
  status         VisitStatus   @default(PENDING)
  notes          String?
  hasIncident    Boolean       @default(false)
  completedTasks String[]
  
  poolId         String
  pool           Pool          @relation(fields: [poolId], references: [id], onDelete: Cascade)
  
  technicianId   String?
  technician     User?         @relation(fields: [technicianId], references: [id], onDelete: SetNull)
  
  results        VisitResult[]
  consumptions   Consumption[]
  notifications  Notification[]

  @@index([poolId])
  @@index([technicianId])
  @@index([timestamp])
}

model VisitResult {
  id            String  @id @default(cuid())
  value         String
  parameterName String
  parameterUnit String?
  
  visitId       String
  visit         Visit   @relation(fields: [visitId], references: [id], onDelete: Cascade)

  @@index([visitId])
}

model Consumption {
  id        String  @id @default(cuid())
  quantity  Float
  
  visitId   String
  visit     Visit   @relation(fields: [visitId], references: [id], onDelete: Cascade)
  
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Restrict)

  @@index([visitId])
  @@index([productId])
}

// =================================================================
// 4. MODELOS DE INCIDENCIAS (TICKETING)
// =================================================================

model Notification {
  id                   String           @id @default(cuid())
  message              String
  isRead               Boolean          @default(false)
  status               NotificationStatus @default(PENDING)
  priority             IncidentPriority?
  resolutionNotes      String?
  resolutionDeadline   DateTime?
  
  tenantId             String
  tenant               Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  userId               String
  user                 User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  visitId              String?
  visit                Visit?           @relation(fields: [visitId], references: [id], onDelete: SetNull)
  
  images               IncidentImage[]
  tasks                IncidentTask[]

  parentNotificationId String?
  parentNotification   Notification?    @relation("NotificationReplies", fields: [parentNotificationId], references: [id], onDelete: Cascade)
  replies              Notification[]   @relation("NotificationReplies")
}

model IncidentTask {
  id              String             @id @default(cuid())
  title           String
  description     String?
  status          IncidentTaskStatus @default(PENDING)
  priority        IncidentPriority   @default(NORMAL)
  deadline        DateTime?
  resolutionNotes String?
  
  notificationId  String
  notification    Notification       @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  
  assignedToId    String?
  assignedTo      User?              @relation(name: "AssignedTasks", fields: [assignedToId], references: [id], onDelete: SetNull)
  
  // ✅ CORRECCIÓN 1: Se añade la contraparte de la relación para createdTasks
  createdById     String?
  createdBy       User?              @relation(name: "CreatedTasks", fields: [createdById], references: [id], onDelete: SetNull)

  tenantId        String
  tenant          Tenant             @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  logs            IncidentTaskLog[]

  @@index([notificationId])
  @@index([assignedToId])
}

model IncidentTaskLog {
  id             String       @id @default(cuid())
  action         LogAction
  details        String
  createdAt      DateTime     @default(now())
  
  incidentTaskId String
  incidentTask   IncidentTask @relation(fields: [incidentTaskId], references: [id], onDelete: Cascade)
  
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([incidentTaskId])
}

model IncidentImage {
  id             String       @id @default(cuid())
  url            String
  createdAt      DateTime     @default(now())
  
  notificationId String
  notification   Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  
  uploaderId     String
  uploader       User         @relation(fields: [uploaderId], references: [id], onDelete: Cascade)

  @@index([notificationId])
}

// =================================================================
// 5. MODELOS DE CATÁLOGOS
// =================================================================

model ParameterTemplate {
  id                 String              @id @default(cuid())
  name               String
  unit               String?
  type               InputType
  selectOptions      String[]
  
  tenantId           String
  tenant             Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  poolConfigurations PoolConfiguration[]

  @@unique([name, tenantId])
  @@index([tenantId])
}

model ScheduledTaskTemplate {
  id                 String              @id @default(cuid())
  name               String
  description        String?

  tenantId           String
  tenant             Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  poolConfigurations PoolConfiguration[]

  @@unique([name, tenantId])
  @@index([tenantId])
}

model ProductCategory {
  id                 String                   @id @default(cuid())
  name               String
  
  tenantId           String
  tenant             Tenant                   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  products           Product[]
  // ✅ CORRECCIÓN 2: Se añade la contraparte de la relación para las reglas de precios
  clientPricingRules ClientProductPricing[]   @relation("ProductCategoryPricing")

  @@unique([name, tenantId])
  @@index([tenantId])
}

model Product {
  id                 String                  @id @default(cuid())
  name               String
  description        String?
  unit               String
  cost               Float
  salePrice          Float
  taxRate            Float                   @default(21)
  
  tenantId           String
  tenant             Tenant                  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  categoryId         String?
  category           ProductCategory?        @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  
  consumptions       Consumption[]
  clientPricingRules ClientProductPricing[]

  @@unique([name, tenantId])
  @@index([tenantId])
}

// =================================================================
// 6. MODELOS DE CONFIGURACIÓN Y FINANZAS
// =================================================================

model PoolConfiguration {
  id                  String                 @id @default(cuid())
  frequency           VisitFrequency         @default(WEEKLY)
  minThreshold        Float?
  maxThreshold        Float?
  lastCompleted       DateTime?
  
  poolId              String
  pool                Pool                   @relation(fields: [poolId], references: [id], onDelete: Cascade)
  
  parameterTemplateId String?
  parameterTemplate   ParameterTemplate?     @relation(fields: [parameterTemplateId], references: [id], onDelete: Cascade)
  
  taskTemplateId      String?
  taskTemplate        ScheduledTaskTemplate? @relation(fields: [taskTemplateId], references: [id], onDelete: Cascade)

  @@unique([poolId, parameterTemplateId])
  @@unique([poolId, taskTemplateId])
  @@index([poolId])
}

model ClientProductPricing {
  id                   String           @id @default(cuid())
  discountPercentage   Float
  
  clientId             String
  client               Client           @relation(fields: [clientId], references: [id], onDelete: Cascade)
  
  productId            String?
  product              Product?         @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  productCategoryId    String?
  productCategory      ProductCategory? @relation(name: "ProductCategoryPricing", fields: [productCategoryId], references: [id], onDelete: Cascade)

  @@unique([clientId, productId])
  @@unique([clientId, productCategoryId])
  @@index([clientId])
}

model Payment {
  id          String   @id @default(cuid())
  amount      Float
  paymentDate DateTime
  method      String
  notes       String?
  
  clientId    String
  client      Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@index([clientId])
}

model Expense {
  id          String   @id @default(cuid())
  amount      Float
  expenseDate DateTime
  description String
  category    String
  
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
}

// =================================================================
// ENUMS
// =================================================================

enum UserRole {
  SUPER_ADMIN
  ADMIN
  TECHNICIAN
  MANAGER
}

enum SubscriptionStatus {
  TRIAL
  ACTIVE
  PAYMENT_PENDING
  INACTIVE
}

enum InputType {
  NUMBER
  BOOLEAN
  TEXT
  SELECT
}

enum VisitStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum VisitFrequency {
  DAILY
  WEEKLY
  BIWEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}

enum NotificationStatus {
  PENDING
  RESOLVED
}

enum IncidentPriority {
  LOW
  NORMAL
  HIGH
  CRITICAL
}

enum IncidentTaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum LogAction {
  CREATION
  STATUS_CHANGE
  COMMENT
  DEADLINE_REQUEST
  DEADLINE_UPDATE
}

enum BillingModel {
  SERVICE_ONLY
  FEE_PLUS_MATERIALS
  ALL_INCLUSIVE
}