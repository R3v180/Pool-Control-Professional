// filename: packages/server/prisma/schema.prisma
// Version: 1.3.0 (Add VisitStatus enum and status field to Visit model)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id                 String                @id @default(cuid())
  companyName        String
  subdomain          String                @unique
  subscriptionStatus SubscriptionStatus    @default(TRIAL)
  nextPaymentDate    DateTime?
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
  users              User[]
  clients            Client[]
  pools              Pool[]
  products           Product[]
  parameterTemplates ParameterTemplate[]
  taskTemplates      ScheduledTaskTemplate[]
  payments           Payment[]
  notifications      Notification[]
}

model Payment {
  id          String   @id @default(cuid())
  amount      Float
  paymentDate DateTime
  method      String
  notes       String?
  createdAt   DateTime @default(now())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  name          String
  password      String
  role          UserRole
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  tenantId      String
  tenant        Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  visits        Visit[]
  notifications Notification[]
}

model Client {
  id            String   @id @default(cuid())
  name          String
  contactPerson String?
  email         String?
  phone         String?
  address       String?
  priceModifier Float    @default(1.0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  tenantId      String
  tenant        Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  pools         Pool[]
}

model Pool {
  id             String              @id @default(cuid())
  name           String
  address        String
  qrCode         String              @unique @default(cuid())
  volume         Float?
  type           String?
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  clientId       String
  client         Client              @relation(fields: [clientId], references: [id], onDelete: Cascade)
  tenantId       String
  tenant         Tenant              @relation(fields: [tenantId], references: [id])
  configurations PoolConfiguration[]
  visits         Visit[]
}

model ParameterTemplate {
  id            String              @id @default(cuid())
  name          String
  unit          String?
  type          InputType           @default(NUMBER)
  selectOptions String[]
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  tenantId      String
  tenant        Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  configurations PoolConfiguration[]
}

model ScheduledTaskTemplate {
  id             String              @id @default(cuid())
  name           String
  description    String?
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  tenantId       String
  tenant         Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  configurations PoolConfiguration[]
}

model PoolConfiguration {
  id                  String                 @id @default(cuid())
  frequency           Frequency
  minThreshold        Float?
  maxThreshold        Float?
  lastCompleted       DateTime?
  poolId              String
  pool                Pool                   @relation(fields: [poolId], references: [id], onDelete: Cascade)
  parameterTemplateId String?
  parameterTemplate   ParameterTemplate?     @relation(fields: [parameterTemplateId], references: [id], onDelete: Cascade)
  taskTemplateId      String?
  taskTemplate        ScheduledTaskTemplate? @relation(fields: [taskTemplateId], references: [id], onDelete: Cascade)
}

model Visit {
  id             String        @id @default(cuid())
  timestamp      DateTime      @default(now())
  notes          String?
  hasIncident    Boolean       @default(false)
  status         VisitStatus   @default(PENDING) // <-- CAMPO AÃ‘ADIDO
  poolId         String
  pool           Pool          @relation(fields: [poolId], references: [id], onDelete: Cascade)
  technicianId   String?
  technician     User?         @relation(fields: [technicianId], references: [id])
  results        VisitResult[]
  consumptions   Consumption[]
  completedTasks String[]
}

model VisitResult {
  id            String  @id @default(cuid())
  value         String
  visitId       String
  visit         Visit   @relation(fields: [visitId], references: [id], onDelete: Cascade)
  parameterName String
  parameterUnit String?
}

model Product {
  id        String   @id @default(cuid())
  name      String
  unit      String
  basePrice Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

model Consumption {
  id          String @id @default(cuid())
  quantity    Float
  priceAtTime Float
  visitId     String
  visit       Visit  @relation(fields: [visitId], references: [id], onDelete: Cascade)
  productName String
  productUnit String
}

model Notification {
  id        String   @id @default(cuid())
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


// NUEVO ENUM
enum VisitStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum UserRole {
  SUPER_ADMIN
  MANAGER
  ADMIN
  TECHNICIAN
  CLIENT
}

enum SubscriptionStatus {
  TRIAL
  ACTIVE
  PAYMENT_PENDING
  INACTIVE
}

enum InputType {
  NUMBER
  BOOLEAN
  TEXT
  SELECT
}

enum Frequency {
  DIARIA
  SEMANAL
  QUINCENAL
  MENSUAL
  TRIMESTRAL
  SEMESTRAL
  ANUAL
}