// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =============================================
// MODELOS DE AUTENTICACIÓN Y ESTRUCTURA
// =============================================

model Tenant {
  id                 String               @id @default(cuid())
  companyName        String
  subdomain          String               @unique
  subscriptionStatus SubscriptionStatus @default(TRIAL)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt

  users         User[]
  clients       Client[]
  pools         Pool[]
  paramTemplates ParameterTemplate[]
  taskTemplates ScheduledTaskTemplate[]
  notifications Notification[]
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      UserRole @default(TECHNICIAN)
  tenantId  String

  tenant        Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  assignedVisits Visit[]
  notifications Notification[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([tenantId])
}

// =============================================
// MODELOS DE NEGOCIO (ADMIN)
// =============================================

model Client {
  id            String  @id @default(cuid())
  name          String
  contactPerson String?
  email         String?
  phone         String?
  address       String?
  priceModifier Float   @default(1.0)
  tenantId      String

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  pools  Pool[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([tenantId])
}

model Pool {
  id        String  @id @default(cuid())
  name      String
  address   String
  volume    Float?
  type      String? // e.g., "Cloro", "Sal"
  clientId  String
  tenantId  String

  client         Client              @relation(fields: [clientId], references: [id], onDelete: Cascade)
  tenant         Tenant              @relation(fields: [tenantId], references: [id], onDelete: NoAction)
  configurations PoolConfiguration[]
  visits         Visit[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([clientId])
  @@index([tenantId])
}

// --- Catálogos de Plantillas ---

model ParameterTemplate {
  id            String              @id @default(cuid())
  name          String
  unit          String?
  type          InputType           @default(NUMBER)
  selectOptions String[]
  tenantId      String

  tenant         Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  configurations PoolConfiguration[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([tenantId])
}

model ScheduledTaskTemplate {
  id          String @id @default(cuid())
  name        String
  description String?
  tenantId    String

  tenant         Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  configurations PoolConfiguration[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([tenantId])
}

// --- Modelo de Unión: Ficha de Mantenimiento ---

model PoolConfiguration {
  id                  String     @id @default(cuid())
  poolId              String
  frequency           Frequency
  minThreshold        Float?
  maxThreshold        Float?
  lastCompleted       DateTime?
  parameterTemplateId String?
  taskTemplateId      String?

  pool              Pool                   @relation(fields: [poolId], references: [id], onDelete: Cascade)
  parameterTemplate ParameterTemplate?     @relation(fields: [parameterTemplateId], references: [id], onDelete: Cascade)
  taskTemplate      ScheduledTaskTemplate? @relation(fields: [taskTemplateId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([poolId])
}

// =============================================
// MODELOS OPERATIVOS (TÉCNICO)
// =============================================

model Visit {
  id             String        @id @default(cuid())
  timestamp      DateTime
  poolId         String
  technicianId   String?
  status         VisitStatus   @default(PENDING)
  notes          String?
  completedTasks String[]
  hasIncident    Boolean       @default(false)
  
  pool           Pool          @relation(fields: [poolId], references: [id], onDelete: Cascade)
  technician     User?         @relation(fields: [technicianId], references: [id], onDelete: SetNull)
  results        VisitResult[]
  notifications  Notification[]

  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@index([poolId])
  @@index([technicianId])
}

model VisitResult {
  id            String  @id @default(cuid())
  visitId       String
  parameterName String
  parameterUnit String?
  value         String

  visit Visit @relation(fields: [visitId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([visitId])
}

model Notification {
  id        String   @id @default(cuid())
  message   String
  isRead    Boolean  @default(false) // Lo mantenemos para la campana 
  // --- NUEVOS CAMPOS ---
  status            NotificationStatus @default(PENDING)
  resolutionNotes   String?

  userId    String
  tenantId  String
  visitId   String?

  visit     Visit?   @relation(fields: [visitId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: NoAction)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([userId])
  @@index([tenantId])
}


// =============================================
// ENUMS
// =============================================

// --- NUEVO ENUM ---
enum NotificationStatus {
  PENDING
  RESOLVED
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  MANAGER
  TECHNICIAN
}

enum SubscriptionStatus {
  TRIAL
  ACTIVE
  PAYMENT_PENDING
  INACTIVE
}

enum InputType {
  NUMBER
  BOOLEAN
  TEXT
  SELECT
}

enum Frequency {
  DIARIA
  SEMANAL
  QUINCENAL
  MENSUAL
  TRIMESTRAL
  SEMESTRAL
  ANUAL
}

enum VisitStatus {
  PENDING
  COMPLETED
  CANCELLED
}